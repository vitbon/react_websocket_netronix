{"version":3,"sources":["components/Display/Display.jsx","components/Socket/Socket.jsx","index.js"],"names":["Display","Math","round","random","className","width","cellSpacing","Date","now","this","props","messages","map","item","name","substr","toLowerCase","_id","unit","blink","timeStamp","measurements","Component","Socket","state","socket","WebSocket","onopen","console","log","onmessage","event","JSON","parse","data","dex","str","formattedTime","forEach","element","idx","date","toLocaleString","uniqKey","concat","filter","index","indexOf","accumul","slice","i","length","hasID","j","push","setState","onerror","err","message","close","onclose","wasClean","code","React","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAGqBA,G,6KAEPC,KAAKC,MAAqB,IAAdD,KAAKE,UAE7B,OACC,sBAAKC,UAAU,YAAf,UACC,qBAAKA,UAAU,SAAf,SACC,uBAAOC,MAAM,OAAOC,YAAY,MAAhC,SACC,gCACC,+BACC,oBAAID,MAAM,MAAV,gBAAqBE,KAAKC,MAAMP,KAAKE,UACrC,oBAAIE,MAAM,MAAV,iBAAqBE,KAAKC,MAAMP,KAAKE,UACrC,oBAAIE,MAAM,MAAV,iBAAqBE,KAAKC,MAAMP,KAAKE,UACrC,oBAAIE,MAAM,MAAV,wBAAqBE,KAAKC,MAAMP,KAAKE,UACrC,6CAASI,KAAKC,MAAMP,KAAKE,YALjBI,KAAKC,MAAMP,KAAKE,WADdI,KAAKC,MAAMP,KAAKE,WADcI,KAAKC,MAAMP,KAAKE,YAY5D,qBAAKC,UAAU,UAAf,SACGK,KAAKC,MAAMC,SAASC,KAAK,SAAAC,GAAI,OAC9B,uBAAOR,MAAM,OAAOC,YAAY,MAAhC,SACC,gCACC,+BACC,oBAAID,MAAM,MACRD,UAAWS,EAAKC,KAAKC,OAAO,EAAE,GAAGC,cADnC,SAIEH,EAAKI,KAFAV,KAAKC,MAAMP,KAAKE,UAIvB,oBAAIE,MAAM,MAAV,SACEQ,EAAKC,MADcP,KAAKC,MAAMP,KAAKE,UAGrC,oBAAIE,MAAM,MAAV,SACEQ,EAAKK,MADcX,KAAKC,MAAMP,KAAKE,UAGrC,oBAAIE,MAAM,MAAqCD,UAAWS,EAAKM,MAA/D,SACEN,EAAKO,WADcb,KAAKC,MAAMP,KAAKE,UAGrC,oBAAmCC,UAAWS,EAAKM,MAAnD,SACEN,EAAKQ,cADEd,KAAKC,MAAMP,KAAKE,YAhBjBI,KAAKC,MAAMP,KAAKE,WADdI,KAAKC,MAAMP,KAAKE,WADcI,KAAKC,MAAMP,KAAKE,cAF/BI,KAAKC,MAAMP,KAAKE,iB,GAnBbmB,cCAhBC,E,kDACnB,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXb,SAAU,IAHK,E,gEAOC,IAAD,OAEjBF,KAAKgB,OAAS,IAAIC,UAAU,6BAG5BjB,KAAKgB,OAAOE,OAAS,WACnBC,QAAQC,IAAI,4BAIdpB,KAAKgB,OAAOK,UAAY,SAAAC,GACtB,IAAIpB,EAAWqB,KAAKC,MAAMF,EAAMG,MAGhCvB,EAASC,KAAI,SAACC,EAAMsB,GAClB,IAAIC,EAAM,GACNC,EAAgB,GASpB,OARAxB,EAAKQ,aAAaiB,SAAQ,SAACC,EAASC,GAClC,IAAMC,EAAO,IAAIlC,KAAkB,IAAbgC,EAAQ,IAC9BF,EAAa,UAAMI,EAAKC,kBACxBN,EAAG,UAAMG,EAAQ,OAEnB1B,EAAKQ,aAAee,EACpBvB,EAAKO,UAAYiB,EACjBxB,EAAK8B,QAAUP,EAAIQ,OAAO/B,EAAKI,IAAKJ,EAAKC,MAClCD,KAETF,EAASkC,QAAO,SAAChC,EAAMiC,GAAP,OAAiBnC,EAASoC,QAAQlC,EAAKI,OAAS6B,KAGhE,IAAIE,EAAU,EAAKxB,MAAMb,SAASsC,QAClCD,EAAQpC,KAAI,SAAAC,GAAI,OAAIA,EAAKM,MAAQ,MAEjC,IAAK,IAAI+B,EAAE,EAAGA,EAAEvC,EAASwC,OAAQD,IAAK,CAEpC,IADA,IAAIE,GAAQ,EACHC,EAAE,EAAGA,EAAEL,EAAQG,OAAQE,IACxB1C,EAASuC,GAAGjC,MAAQ+B,EAAQK,GAAGpC,MAC7BN,EAASuC,GAAG9B,WAAaT,EAASuC,GAAG7B,eACvC2B,EAAQK,GAAGjC,UAAYT,EAASuC,GAAG9B,UACnC4B,EAAQK,GAAGhC,aAAeV,EAASuC,GAAG7B,aACtC2B,EAAQK,GAAGnC,KAAOP,EAASuC,GAAGhC,KAC9B8B,EAAQK,GAAGV,QAAUhC,EAASuC,GAAGP,QACjCK,EAAQK,GAAGlC,MAAQ,SAErBiC,GAAQ,GAGTA,IACHzC,EAASuC,GAAG/B,MAAQ,QACpB6B,EAAQM,KAAK3C,EAASuC,KAG1B,EAAKK,SAAS,CAAE5C,SAAUqC,KAI5BvC,KAAKgB,OAAO+B,QAAU,SAAAC,GACpB7B,QAAQC,IAAR,oCAAyC4B,EAAIC,QAA7C,sBACA,EAAKjC,OAAOkC,SAIdlD,KAAKgB,OAAOmC,QAAU,SAAA7B,GAChBA,EAAM8B,SAAUjC,QAAQC,IAAR,0CAA+CE,EAAM+B,KAArD,MACblC,QAAQC,IAAI,+B,6CAKrBpB,KAAKgB,OAAOkC,U,+BAIZ,OACE,8BACE,cAAC,EAAD,CAAShD,SAAUF,KAAKe,MAAMb,UAAeF,KAAKe,MAAMb,SAASgC,e,GAnFrCoB,IAAMzC,WCE1C0C,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.7bb98380.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './display.css';\r\n\r\nexport default class Display extends Component {\r\n  render() {\r\n\t\tconst bbb = Math.round((Math.random()*1000))%2;\r\n\t\tconst blink = bbb ? \"blink\" : \"\";\r\n\t\treturn (\r\n\t\t\t<div className=\"container\">\r\n\t\t\t\t<div className=\"header\">\r\n\t\t\t\t\t<table width=\"100%\" cellSpacing=\"2px\" key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t<tbody key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t<tr key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t\t<td width=\"25%\" key={Date.now()*Math.random()}>_ID</td>\r\n\t\t\t\t\t\t\t\t<td width=\"15%\" key={Date.now()*Math.random()}>Name</td>\r\n\t\t\t\t\t\t\t\t<td width=\"10%\" key={Date.now()*Math.random()}>Unit</td>\r\n\t\t\t\t\t\t\t\t<td width=\"20%\" key={Date.now()*Math.random()}>Date & Time</td>\r\n\t\t\t\t\t\t\t\t<td key={Date.now()*Math.random()}>Measurements</td>\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t</tbody>\t\r\n\t\t\t\t\t</table>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"wrapper\" key={Date.now()*Math.random()}>\r\n\t\t\t\t\t{ this.props.messages.map( item =>\r\n\t\t\t\t\t\t<table width=\"100%\" cellSpacing=\"2px\" key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t<tbody key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t\t<tr key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t\t\t<td width=\"25%\" \r\n\t\t\t\t\t\t\t\t\t\t\tclassName={item.name.substr(0,3).toLowerCase()}\r\n\t\t\t\t\t\t\t\t\t\t\tkey={Date.now()*Math.random()}\r\n\t\t\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\t\t\t{item._id}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td width=\"15%\" key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t\t\t\t{item.name}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td width=\"10%\" key={Date.now()*Math.random()}>\r\n\t\t\t\t\t\t\t\t\t\t{item.unit}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td width=\"20%\" key={Date.now()*Math.random()} className={item.blink}>\r\n\t\t\t\t\t\t\t\t\t\t{item.timeStamp}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t\t<td key={Date.now()*Math.random()} className={item.blink}>\r\n\t\t\t\t\t\t\t\t\t\t{item.measurements}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t\t</tbody>\t\t\t\r\n\t\t\t\t\t\t</table>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n  }\r\n}","import React from 'react';\r\nimport Display from '../Display/Display.jsx';\r\n\r\nexport default class Socket extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      messages: []\r\n    }\r\n  }\r\n  \r\n  componentDidMount(){\r\n    // initializing Socket\r\n    this.socket = new WebSocket('wss://jsdemo.envdev.io/ws');\r\n\r\n    // connected successfully\r\n    this.socket.onopen = () => {\r\n      console.log(\"Connected successfully!\");\r\n    };\r\n\r\n    // received data from device and format it\r\n    this.socket.onmessage = event => { \r\n      let messages = JSON.parse(event.data);\r\n\r\n      // formating timestamp and value\r\n      messages.map((item, dex) => {\r\n        let str = \"\";\r\n        let formattedTime = \"\";\r\n        item.measurements.forEach((element, idx) => {\r\n          const date = new Date(element[0] * 1000);\r\n          formattedTime = `${date.toLocaleString()}`;\r\n          str = `${element[1]}`;\r\n        });\r\n        item.measurements = str;\r\n        item.timeStamp = formattedTime;\r\n        item.uniqKey = str.concat(item._id, item.name);\r\n        return item;\r\n      });\r\n      messages.filter((item, index) => messages.indexOf(item._id) === index);\r\n\r\n      // updating of new messages\r\n      let accumul = this.state.messages.slice();\r\n      accumul.map(item => item.blink = \"\");\r\n\r\n      for (let i=0; i<messages.length; i++) {\r\n        let hasID = false;\r\n        for (let j=0; j<accumul.length; j++) {\r\n            if (messages[i]._id === accumul[j]._id) {\r\n              if (messages[i].timeStamp && messages[i].measurements) {\r\n                accumul[j].timeStamp = messages[i].timeStamp;\r\n                accumul[j].measurements = messages[i].measurements;                \r\n                accumul[j].unit = messages[i].unit;\r\n                accumul[j].uniqKey = messages[i].uniqKey;\r\n                accumul[j].blink = \"blink\";\r\n              }\r\n              hasID = true;\r\n            }\r\n        }\r\n        if (!hasID) { // update values\r\n          messages[i].blink = \"blink\";\r\n          accumul.push(messages[i]);\r\n        }\r\n      }\r\n      this.setState({ messages: accumul });      \r\n    };\r\n\r\n    // encountered error\r\n    this.socket.onerror = err => {\r\n      console.log(`Socket encountered error: ${err.message}. Closing socket.`);\r\n      this.socket.close();\r\n    };\r\n\r\n    // connection lost\r\n    this.socket.onclose = event => {\r\n      if (event.wasClean) console.log(`Socket was closed clearly, code=${event.code}.`);\r\n        else console.log('The connection was lost.');\r\n    };\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    this.socket.close();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Display messages={this.state.messages} key={this.state.messages.uniqKey} />\r\n      </div>\r\n    );\r\n  }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Socket from './components/Socket/Socket';\n\nReactDOM.render(\n    <React.StrictMode>\n      <Socket />\n    </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}